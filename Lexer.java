/* The following code was generated by JFlex 1.4.3 on 13/11/21 22:32 */


package codigo;
import static codigo.Tokens.*;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 13/11/21 22:32 from the specification file
 * <tt>/home/gema/NetBeansProjects/maquina/src/codigo/Lexer.flex</tt>
 */
class Lexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\3\1\3\2\0\1\3\22\0\1\3\7\0\1\43\1\45"+
    "\2\0\1\3\1\44\2\0\12\2\7\0\15\1\1\42\14\1\4\0"+
    "\1\1\1\0\1\5\1\30\1\16\1\32\1\6\1\33\1\34\1\14"+
    "\1\15\1\25\1\1\1\4\1\20\1\12\1\7\1\22\1\1\1\17"+
    "\1\10\1\31\1\11\1\24\1\13\1\21\1\41\1\27\146\0\1\26"+
    "\7\0\1\37\3\0\1\40\3\0\1\36\1\0\1\23\6\0\1\35"+
    "\uff05\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\2\1\5\1\2"+
    "\1\6\13\2\1\1\6\2\1\1\1\6\1\2\1\1"+
    "\1\2\1\7\2\10\2\2\1\0\6\2\1\7\1\2"+
    "\1\5\3\2\1\10\3\2\1\10\1\5\1\2\1\10"+
    "\1\2\1\7\20\2\1\0\2\2\1\0\1\2\1\10"+
    "\1\2\1\0\11\2\2\0\4\2\1\10\1\2\1\0"+
    "\1\5\11\2\1\0\1\2\1\7\6\2\1\0\16\2"+
    "\1\11\6\2\1\5\1\2\1\7\2\2\1\10\25\2"+
    "\1\5\6\2\1\0\6\2\1\0\5\2\1\0\1\2"+
    "\1\0\12\2\1\10\1\5\1\0\13\2\1\11\21\2"+
    "\1\0\4\2\1\0\2\2\1\5\2\2\1\10\7\2"+
    "\1\0\30\2\1\12\1\0\3\2\1\0\3\2\1\0"+
    "\1\2\1\0\12\2\1\0\2\2\1\0\20\2\1\3"+
    "\2\2\1\11\10\2\1\0\1\10\10\2\1\13\5\2"+
    "\1\0\2\2\1\0\2\2\1\0\1\2\1\0\2\2"+
    "\1\0\1\11\3\2\1\14\17\2\1\0\1\2\1\13"+
    "\4\2\3\0\2\2\1\0\6\2\1\0\2\2\1\0"+
    "\4\2\1\0\4\2\1\15\5\2";

  private static int [] zzUnpackAction() {
    int [] result = new int[419];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\46\0\114\0\162\0\230\0\276\0\344\0\u010a"+
    "\0\u0130\0\u0156\0\u017c\0\u01a2\0\u01c8\0\u01ee\0\u0214\0\u023a"+
    "\0\u0260\0\u0286\0\u02ac\0\u02d2\0\u02f8\0\u031e\0\u0344\0\u036a"+
    "\0\u0390\0\u03b6\0\u03dc\0\u0402\0\u0428\0\u044e\0\u0474\0\u049a"+
    "\0\u04c0\0\u04e6\0\u050c\0\u0532\0\u0558\0\u057e\0\u05a4\0\u05ca"+
    "\0\u05f0\0\u0616\0\u063c\0\u0662\0\u0688\0\u06ae\0\u06d4\0\u06fa"+
    "\0\u0720\0\u0746\0\114\0\u076c\0\u0792\0\u07b8\0\u07de\0\u0804"+
    "\0\u082a\0\46\0\u0850\0\u0876\0\u089c\0\u08c2\0\u08e8\0\u090e"+
    "\0\u0934\0\u095a\0\u0980\0\u09a6\0\u09cc\0\u09f2\0\u0a18\0\u0a3e"+
    "\0\u0a64\0\u0a8a\0\u0ab0\0\u0ad6\0\u0afc\0\u0b22\0\u0b48\0\u0b6e"+
    "\0\u0b94\0\u0bba\0\u0be0\0\u0c06\0\u0c2c\0\u0c52\0\u0c78\0\u0c9e"+
    "\0\u0cc4\0\u0cea\0\u0d10\0\u0d36\0\u0d5c\0\u0d82\0\u0da8\0\u0dce"+
    "\0\u0df4\0\u0e1a\0\u0e40\0\u0e66\0\u0e8c\0\u0eb2\0\u0ed8\0\u0efe"+
    "\0\u0f24\0\u0f4a\0\u0f70\0\u0f96\0\u0fbc\0\u0fe2\0\u1008\0\u102e"+
    "\0\u1054\0\u107a\0\114\0\u10a0\0\u10c6\0\u10ec\0\u1112\0\u1138"+
    "\0\u115e\0\u1184\0\u11aa\0\u11d0\0\u11f6\0\u121c\0\u1242\0\u1268"+
    "\0\u128e\0\u12b4\0\u12da\0\u1300\0\u1326\0\u134c\0\u1372\0\u1398"+
    "\0\114\0\u13be\0\u13e4\0\u140a\0\u1430\0\u1456\0\u147c\0\114"+
    "\0\u14a2\0\u050c\0\u14c8\0\u14ee\0\u1514\0\u153a\0\u1560\0\u1586"+
    "\0\u15ac\0\u15d2\0\u15f8\0\u161e\0\u1644\0\u166a\0\u1690\0\u16b6"+
    "\0\u16dc\0\u1702\0\u1728\0\u174e\0\u1774\0\u179a\0\u17c0\0\u17e6"+
    "\0\u180c\0\u1832\0\u1858\0\u187e\0\u18a4\0\u18ca\0\u18f0\0\u1916"+
    "\0\u193c\0\u1962\0\u1988\0\u19ae\0\u19d4\0\u19fa\0\u1a20\0\u1a46"+
    "\0\u1a6c\0\u1a92\0\u1ab8\0\u1ade\0\u1b04\0\u1b2a\0\u1b50\0\u1b76"+
    "\0\u1b9c\0\u1bc2\0\u1be8\0\u1c0e\0\u1c34\0\u1c5a\0\u1c80\0\u1ca6"+
    "\0\u1ccc\0\u1cf2\0\u1d18\0\u1d3e\0\46\0\u1d64\0\u1d8a\0\u1db0"+
    "\0\u1dd6\0\u1dfc\0\u1e22\0\u1e48\0\u1e6e\0\u1e94\0\u1eba\0\u1ee0"+
    "\0\u1f06\0\46\0\u1f2c\0\u1f52\0\u1f78\0\u1f9e\0\u1fc4\0\u1fea"+
    "\0\u2010\0\u2036\0\u205c\0\u2082\0\u20a8\0\u20ce\0\u20f4\0\u211a"+
    "\0\u2140\0\u2166\0\u218c\0\u21b2\0\u21d8\0\u21fe\0\u2224\0\u224a"+
    "\0\u2270\0\u2296\0\u22bc\0\u22e2\0\u2308\0\u232e\0\u2354\0\u237a"+
    "\0\u23a0\0\u23c6\0\u23ec\0\u2412\0\u2438\0\u245e\0\u2484\0\u24aa"+
    "\0\u24d0\0\u24f6\0\u251c\0\u2542\0\u2568\0\u258e\0\u25b4\0\u25da"+
    "\0\u2600\0\u2626\0\u264c\0\u2672\0\u2698\0\u26be\0\u26e4\0\u270a"+
    "\0\u2730\0\u2756\0\u277c\0\u27a2\0\u27c8\0\u27ee\0\u2814\0\114"+
    "\0\u283a\0\u2860\0\u2886\0\u28ac\0\u28d2\0\u28f8\0\u291e\0\u2944"+
    "\0\u296a\0\u2990\0\u29b6\0\u29dc\0\u2a02\0\u2a28\0\u2a4e\0\u2a74"+
    "\0\u2a9a\0\u2ac0\0\u2ae6\0\u2b0c\0\u2b32\0\u2b58\0\u2b7e\0\u2ba4"+
    "\0\u2bca\0\u2bf0\0\u2c16\0\u2c3c\0\u2c62\0\u2c88\0\u2cae\0\u2cd4"+
    "\0\u2cfa\0\u2d20\0\u2d46\0\u2d6c\0\u2d92\0\u2db8\0\u2dde\0\u2e04"+
    "\0\u2e2a\0\46\0\u2e50\0\u2e76\0\u2224\0\u2e9c\0\u2ec2\0\u2ee8"+
    "\0\u2f0e\0\u2f34\0\u2f5a\0\u2f80\0\u2fa6\0\u2fcc\0\u2ff2\0\u3018"+
    "\0\u303e\0\u3064\0\u308a\0\u30b0\0\u30d6\0\u30fc\0\u3122\0\46"+
    "\0\u3148\0\u316e\0\u3194\0\u31ba\0\u31e0\0\u3206\0\u322c\0\u3252"+
    "\0\u3278\0\u329e\0\u32c4\0\u32ea\0\u3310\0\u3336\0\u335c\0\u3382"+
    "\0\u33a8\0\u1a46\0\u33ce\0\u33f4\0\u341a\0\114\0\u3440\0\u3466"+
    "\0\u348c\0\u34b2\0\u34d8\0\u34fe\0\u3524\0\u354a\0\u3570\0\u3596"+
    "\0\u2354\0\u35bc\0\u35e2\0\u3608\0\u362e\0\u3654\0\u367a\0\114"+
    "\0\u36a0\0\u0428\0\u36c6\0\u36ec\0\u3712\0\u3738\0\u375e\0\u3784"+
    "\0\u37aa\0\u37d0\0\u37f6\0\u381c\0\u3842\0\u3868\0\u388e\0\u38b4"+
    "\0\u38da\0\u3900\0\u3926\0\u394c\0\u3972\0\u3998\0\u39be\0\u39e4"+
    "\0\u3a0a\0\u3a30\0\u3a56\0\u3a7c\0\u3aa2\0\114\0\u3ac8\0\u3aee"+
    "\0\u3b14\0\u3b3a\0\u3b60";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[419];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\1\22\1\3\1\23\1\2\1\24\1\3\1\25\1\26"+
    "\1\27\1\30\1\31\1\32\1\33\2\2\1\34\1\2"+
    "\1\35\1\36\1\37\2\2\47\0\2\3\1\0\17\3"+
    "\1\0\2\3\1\0\6\3\4\0\2\3\5\0\1\4"+
    "\46\0\1\5\43\0\2\3\1\0\1\40\1\41\1\42"+
    "\1\43\1\3\1\44\3\3\1\45\5\3\1\0\2\3"+
    "\1\46\6\3\4\0\2\3\4\0\2\3\1\0\1\47"+
    "\4\3\1\50\1\51\5\3\1\52\2\3\1\0\2\3"+
    "\1\0\1\3\1\53\3\3\1\54\4\0\2\3\4\0"+
    "\2\3\1\0\1\55\3\3\1\56\1\3\1\57\5\3"+
    "\1\60\1\61\1\3\1\0\2\3\1\0\3\3\1\62"+
    "\2\3\4\0\2\3\4\0\2\3\1\0\4\3\1\63"+
    "\12\3\1\0\1\3\1\64\1\0\4\3\1\65\1\3"+
    "\4\0\2\3\4\0\2\3\1\0\1\3\1\66\1\67"+
    "\1\70\5\3\1\71\5\3\1\0\2\3\1\0\6\3"+
    "\3\0\1\72\2\3\4\0\2\3\1\0\4\3\1\73"+
    "\1\3\1\74\10\3\1\0\2\3\1\0\6\3\4\0"+
    "\2\3\4\0\2\3\1\0\1\3\1\75\1\3\1\76"+
    "\1\3\1\77\11\3\1\0\2\3\1\0\6\3\4\0"+
    "\2\3\4\0\2\3\1\0\10\3\1\100\6\3\1\0"+
    "\2\3\1\0\6\3\4\0\2\3\4\0\2\3\1\0"+
    "\1\3\1\101\1\102\1\103\1\3\1\104\3\3\1\105"+
    "\5\3\1\0\2\3\1\0\6\3\4\0\2\3\4\0"+
    "\2\3\1\0\14\3\1\106\2\3\1\0\2\3\1\0"+
    "\6\3\4\0\2\3\4\0\2\3\1\0\1\3\1\107"+
    "\1\110\1\111\1\3\1\112\2\3\1\113\2\3\1\114"+
    "\3\3\1\0\2\3\1\0\6\3\2\0\1\115\1\0"+
    "\2\3\4\0\2\3\1\0\2\3\1\116\2\3\1\117"+
    "\11\3\1\0\2\3\1\0\6\3\1\120\3\0\2\3"+
    "\4\0\2\3\1\0\1\3\1\121\1\122\1\123\13\3"+
    "\1\0\2\3\1\0\6\3\1\124\2\0\1\72\2\3"+
    "\4\0\2\3\1\0\1\125\1\126\1\127\1\130\1\3"+
    "\1\131\3\3\1\132\1\3\1\133\3\3\1\0\2\3"+
    "\1\0\6\3\4\0\2\3\4\0\2\3\1\0\2\3"+
    "\1\134\1\135\13\3\1\0\2\3\1\0\6\3\3\0"+
    "\1\136\2\3\22\0\1\137\27\0\2\3\1\0\1\3"+
    "\1\140\15\3\1\0\2\3\1\0\6\3\4\0\2\3"+
    "\4\0\2\3\1\0\1\3\1\141\1\3\1\142\1\3"+
    "\1\143\11\3\1\0\2\3\1\0\6\3\4\0\2\3"+
    "\4\0\2\3\1\0\2\3\1\144\6\3\1\63\1\3"+
    "\1\145\3\3\1\0\2\3\1\0\6\3\1\72\2\0"+
    "\1\146\2\3\4\0\2\3\1\0\2\3\1\147\2\3"+
    "\1\150\3\3\1\151\5\3\1\0\2\3\1\0\6\3"+
    "\4\0\2\3\4\0\2\3\1\0\1\3\1\152\1\153"+
    "\1\154\5\3\1\155\5\3\1\0\2\3\1\0\6\3"+
    "\4\0\2\3\4\0\2\3\1\0\5\3\1\156\5\3"+
    "\1\157\3\3\1\0\2\3\1\0\6\3\4\0\2\3"+
    "\7\0\1\72\42\0\2\3\1\0\3\3\1\63\13\3"+
    "\1\0\2\3\1\0\6\3\4\0\2\3\4\0\2\3"+
    "\1\0\3\3\1\160\13\3\1\0\2\3\1\0\6\3"+
    "\4\0\2\3\47\0\1\161\2\0\2\3\1\0\1\3"+
    "\1\162\15\3\1\0\2\3\1\0\6\3\4\0\2\3"+
    "\4\0\2\3\1\0\4\3\1\163\11\3\1\164\1\0"+
    "\2\3\1\0\6\3\4\0\2\3\4\0\2\3\1\0"+
    "\4\3\1\63\1\3\1\165\10\3\1\0\2\3\1\0"+
    "\2\3\1\166\3\3\4\0\2\3\4\0\2\3\1\0"+
    "\4\3\1\163\12\3\1\0\2\3\1\0\6\3\4\0"+
    "\2\3\4\0\2\3\1\0\12\3\1\167\4\3\1\0"+
    "\2\3\1\0\6\3\4\0\2\3\4\0\2\3\1\0"+
    "\14\3\1\170\2\3\1\0\2\3\1\0\1\3\1\171"+
    "\4\3\4\0\2\3\25\0\1\172\24\0\2\3\1\0"+
    "\5\3\1\173\11\3\1\0\2\3\1\0\6\3\4\0"+
    "\2\3\4\0\2\3\1\0\17\3\1\0\2\3\1\0"+
    "\2\3\1\64\3\3\4\0\2\3\4\0\2\3\1\0"+
    "\11\3\1\174\5\3\1\0\2\3\1\0\2\3\1\175"+
    "\3\3\4\0\2\3\4\0\2\3\1\0\1\3\1\176"+
    "\15\3\1\0\2\3\1\0\6\3\4\0\2\3\4\0"+
    "\2\3\1\0\5\3\1\177\11\3\1\0\2\3\1\0"+
    "\6\3\4\0\2\3\4\0\2\3\1\0\5\3\1\200"+
    "\11\3\1\0\2\3\1\0\6\3\4\0\2\3\4\0"+
    "\2\3\1\0\1\201\16\3\1\0\2\3\1\0\6\3"+
    "\4\0\2\3\4\0\2\3\1\0\12\3\1\202\4\3"+
    "\1\0\2\3\1\0\2\3\1\203\3\3\4\0\2\3"+
    "\4\0\2\3\1\0\4\3\1\204\12\3\1\0\2\3"+
    "\1\0\2\3\1\205\3\3\4\0\2\3\4\0\2\3"+
    "\1\0\17\3\1\0\2\3\1\0\1\3\1\206\4\3"+
    "\4\0\2\3\4\0\2\3\1\0\16\3\1\207\1\0"+
    "\2\3\1\0\6\3\4\0\2\3\4\0\2\3\1\0"+
    "\11\3\1\210\5\3\1\0\2\3\1\0\6\3\4\0"+
    "\2\3\4\0\2\3\1\0\3\3\1\211\13\3\1\0"+
    "\2\3\1\0\6\3\4\0\2\3\4\0\2\3\1\0"+
    "\11\3\1\212\5\3\1\0\2\3\1\0\6\3\4\0"+
    "\2\3\4\0\2\3\1\0\1\213\16\3\1\0\2\3"+
    "\1\0\6\3\4\0\2\3\4\0\2\3\1\0\17\3"+
    "\1\0\2\3\1\0\5\3\1\214\4\0\2\3\4\0"+
    "\2\3\1\0\6\3\1\215\10\3\1\0\2\3\1\0"+
    "\1\3\1\205\2\3\1\216\1\3\4\0\2\3\4\0"+
    "\2\3\1\0\1\217\5\3\1\220\10\3\1\0\2\3"+
    "\1\0\6\3\4\0\2\3\4\0\2\3\1\0\17\3"+
    "\1\0\2\3\1\0\2\3\1\221\3\3\4\0\2\3"+
    "\4\0\2\3\1\0\1\3\1\222\1\3\1\222\5\3"+
    "\1\223\5\3\1\0\2\3\1\0\6\3\4\0\2\3"+
    "\4\0\2\3\1\0\17\3\1\0\1\224\1\3\1\0"+
    "\6\3\4\0\2\3\4\0\2\3\1\0\4\3\1\225"+
    "\12\3\1\0\2\3\1\0\6\3\4\0\2\3\4\0"+
    "\2\3\1\0\17\3\1\0\2\3\1\0\1\3\1\226"+
    "\4\3\4\0\2\3\4\0\2\3\1\0\11\3\1\227"+
    "\5\3\1\0\2\3\1\0\6\3\4\0\2\3\4\0"+
    "\2\3\1\0\4\3\1\230\5\3\1\231\4\3\1\0"+
    "\2\3\1\0\1\3\1\232\4\3\4\0\2\3\4\0"+
    "\2\3\1\0\13\3\1\233\3\3\1\0\2\3\1\0"+
    "\6\3\4\0\2\3\4\0\2\3\1\0\14\3\1\234"+
    "\2\3\1\0\1\3\1\235\1\0\6\3\4\0\2\3"+
    "\4\0\2\3\1\0\14\3\1\236\2\3\1\0\2\3"+
    "\1\0\6\3\4\0\2\3\4\0\2\3\1\0\2\3"+
    "\1\237\13\3\1\240\1\0\1\3\1\241\1\0\6\3"+
    "\4\0\2\3\4\0\2\3\1\0\16\3\1\242\1\0"+
    "\2\3\1\0\6\3\4\0\2\3\4\0\2\3\1\0"+
    "\4\3\1\243\1\3\1\244\4\3\1\245\1\246\2\3"+
    "\1\0\2\3\1\0\1\3\1\247\1\250\1\3\1\251"+
    "\1\3\4\0\2\3\4\0\2\3\1\0\1\252\16\3"+
    "\1\0\2\3\1\0\6\3\4\0\2\3\4\0\2\3"+
    "\1\0\6\3\1\253\1\3\1\254\2\3\1\255\1\256"+
    "\2\3\1\0\2\3\1\0\3\3\1\64\2\3\4\0"+
    "\2\3\4\0\2\3\1\0\1\3\1\257\15\3\1\0"+
    "\2\3\1\0\6\3\4\0\2\3\4\0\2\3\1\0"+
    "\11\3\1\260\5\3\1\0\2\3\1\0\6\3\4\0"+
    "\2\3\4\0\2\3\1\0\2\3\1\261\14\3\1\0"+
    "\2\3\1\0\6\3\4\0\2\3\13\0\1\262\36\0"+
    "\2\3\1\0\1\263\13\3\1\264\1\3\1\265\1\0"+
    "\2\3\1\0\4\3\1\266\1\3\4\0\2\3\4\0"+
    "\2\3\1\0\2\3\1\267\6\3\1\270\5\3\1\0"+
    "\2\3\1\0\6\3\4\0\2\3\21\0\1\271\30\0"+
    "\2\3\1\0\6\3\1\64\4\3\1\272\2\3\1\170"+
    "\1\0\2\3\1\0\6\3\4\0\2\3\4\0\2\3"+
    "\1\0\4\3\1\273\12\3\1\0\2\3\1\0\2\3"+
    "\1\274\1\275\2\3\4\0\2\3\4\0\2\3\1\0"+
    "\6\3\1\276\10\3\1\0\2\3\1\0\6\3\1\0"+
    "\1\146\2\0\2\3\13\0\1\277\36\0\2\3\1\0"+
    "\1\3\1\300\15\3\1\0\2\3\1\301\6\3\4\0"+
    "\2\3\4\0\2\3\1\0\1\64\5\3\1\302\4\3"+
    "\1\303\2\3\1\216\1\0\2\3\1\0\6\3\4\0"+
    "\2\3\4\0\2\3\1\0\1\64\3\3\1\304\6\3"+
    "\1\305\3\3\1\0\2\3\1\0\2\3\1\306\3\3"+
    "\4\0\2\3\4\0\2\3\1\0\13\3\1\220\3\3"+
    "\1\0\2\3\1\0\6\3\4\0\2\3\4\0\2\3"+
    "\1\0\2\3\1\307\14\3\1\0\2\3\1\0\6\3"+
    "\4\0\2\3\4\0\2\3\1\0\4\3\1\64\12\3"+
    "\1\0\2\3\1\0\6\3\4\0\2\3\4\0\2\3"+
    "\1\0\1\3\1\310\15\3\1\0\2\3\1\0\6\3"+
    "\4\0\2\3\4\0\2\3\1\0\1\311\5\3\1\312"+
    "\4\3\1\313\3\3\1\0\2\3\1\0\6\3\4\0"+
    "\2\3\4\0\2\3\1\0\4\3\1\314\12\3\1\0"+
    "\2\3\1\0\6\3\4\0\2\3\10\0\1\315\70\0"+
    "\1\316\16\0\2\3\1\0\16\3\1\317\1\0\2\3"+
    "\1\0\6\3\4\0\2\3\4\0\2\3\1\0\1\170"+
    "\12\3\1\320\3\3\1\0\1\3\1\321\1\0\6\3"+
    "\4\0\2\3\4\0\2\3\1\0\14\3\1\322\2\3"+
    "\1\0\2\3\1\0\2\3\1\323\3\3\4\0\2\3"+
    "\4\0\2\3\1\0\17\3\1\0\2\3\1\0\1\64"+
    "\5\3\4\0\2\3\4\0\2\3\1\0\1\324\1\325"+
    "\4\3\1\326\3\3\1\327\1\3\1\330\2\3\1\0"+
    "\2\3\1\0\6\3\4\0\2\3\4\0\2\3\1\0"+
    "\1\3\1\331\15\3\1\0\2\3\1\0\6\3\4\0"+
    "\2\3\12\0\1\332\37\0\2\3\1\0\4\3\1\333"+
    "\7\3\1\334\1\3\1\335\1\0\2\3\1\0\1\3"+
    "\1\336\4\3\4\0\2\3\4\0\2\3\1\0\1\337"+
    "\12\3\1\340\3\3\1\0\2\3\1\0\6\3\4\0"+
    "\2\3\4\0\2\3\1\0\1\3\1\341\1\342\1\3"+
    "\1\343\11\3\1\344\1\0\2\3\1\0\6\3\4\0"+
    "\2\3\4\0\2\3\1\0\14\3\1\345\2\3\1\0"+
    "\2\3\1\0\6\3\4\0\2\3\4\0\2\3\1\0"+
    "\1\346\16\3\1\0\2\3\1\0\6\3\4\0\2\3"+
    "\4\0\2\3\1\0\17\3\1\0\2\3\1\0\2\3"+
    "\1\347\3\3\4\0\2\3\4\0\2\3\1\0\2\3"+
    "\1\350\14\3\1\0\2\3\1\0\6\3\4\0\2\3"+
    "\4\0\2\3\1\0\11\3\1\351\5\3\1\0\2\3"+
    "\1\0\6\3\4\0\2\3\4\0\2\3\1\0\1\3"+
    "\1\352\15\3\1\0\2\3\1\0\6\3\4\0\2\3"+
    "\4\0\2\3\1\0\4\3\1\353\12\3\1\0\2\3"+
    "\1\0\6\3\4\0\2\3\5\0\1\354\44\0\2\3"+
    "\1\0\17\3\1\0\1\167\1\3\1\0\6\3\4\0"+
    "\2\3\4\0\2\3\1\0\11\3\1\355\5\3\1\0"+
    "\2\3\1\0\6\3\4\0\2\3\4\0\2\3\1\0"+
    "\17\3\1\0\2\3\1\0\2\3\1\356\3\3\4\0"+
    "\2\3\4\0\2\3\1\0\13\3\1\170\3\3\1\0"+
    "\2\3\1\0\6\3\4\0\2\3\4\0\2\3\1\0"+
    "\2\3\1\357\14\3\1\0\2\3\1\0\6\3\4\0"+
    "\2\3\4\0\2\3\1\0\1\3\1\211\15\3\1\0"+
    "\2\3\1\0\6\3\4\0\2\3\4\0\2\3\1\0"+
    "\13\3\1\360\3\3\1\0\2\3\1\0\6\3\4\0"+
    "\2\3\20\0\1\361\31\0\2\3\1\0\14\3\1\362"+
    "\2\3\1\0\2\3\1\0\6\3\4\0\2\3\4\0"+
    "\2\3\1\0\1\363\16\3\1\0\2\3\1\0\6\3"+
    "\4\0\2\3\4\0\2\3\1\0\2\3\1\364\14\3"+
    "\1\0\2\3\1\0\6\3\4\0\2\3\4\0\2\3"+
    "\1\0\13\3\1\365\3\3\1\0\2\3\1\0\6\3"+
    "\4\0\2\3\4\0\2\3\1\0\2\3\1\363\14\3"+
    "\1\0\2\3\1\0\6\3\4\0\2\3\4\0\2\3"+
    "\1\0\1\3\1\211\15\3\1\0\1\3\1\366\1\0"+
    "\6\3\4\0\2\3\4\0\2\3\1\0\1\3\1\367"+
    "\1\3\1\367\13\3\1\0\2\3\1\0\6\3\4\0"+
    "\2\3\4\0\2\3\1\0\5\3\1\370\11\3\1\0"+
    "\2\3\1\0\6\3\4\0\2\3\4\0\2\3\1\0"+
    "\13\3\1\323\3\3\1\0\2\3\1\0\6\3\4\0"+
    "\2\3\4\0\2\3\1\0\1\3\1\371\15\3\1\0"+
    "\2\3\1\0\6\3\4\0\2\3\4\0\2\3\1\0"+
    "\13\3\1\247\3\3\1\0\2\3\1\0\6\3\4\0"+
    "\2\3\4\0\2\3\1\0\1\3\1\372\15\3\1\0"+
    "\2\3\1\0\6\3\4\0\2\3\4\0\2\3\1\0"+
    "\1\373\16\3\1\0\2\3\1\0\6\3\4\0\2\3"+
    "\4\0\2\3\1\0\17\3\1\0\2\3\1\0\4\3"+
    "\1\374\1\3\4\0\2\3\4\0\2\3\1\0\12\3"+
    "\1\375\4\3\1\0\2\3\1\0\6\3\4\0\2\3"+
    "\4\0\2\3\1\0\1\3\1\376\15\3\1\0\2\3"+
    "\1\0\6\3\4\0\2\3\4\0\2\3\1\0\17\3"+
    "\1\0\2\3\1\0\6\3\1\377\3\0\2\3\4\0"+
    "\2\3\1\0\11\3\1\270\5\3\1\0\2\3\1\0"+
    "\6\3\4\0\2\3\4\0\2\3\1\0\17\3\1\0"+
    "\2\3\1\332\6\3\4\0\2\3\4\0\2\3\1\0"+
    "\1\u0100\16\3\1\0\2\3\1\0\6\3\4\0\2\3"+
    "\4\0\2\3\1\0\2\3\1\u0101\14\3\1\0\2\3"+
    "\1\0\6\3\4\0\2\3\4\0\2\3\1\0\17\3"+
    "\1\0\1\u0102\1\3\1\0\6\3\4\0\2\3\4\0"+
    "\2\3\1\0\1\3\1\u0103\15\3\1\0\2\3\1\0"+
    "\6\3\4\0\2\3\4\0\2\3\1\0\3\3\1\u0104"+
    "\13\3\1\0\2\3\1\0\6\3\4\0\2\3\4\0"+
    "\2\3\1\0\2\3\1\211\14\3\1\0\2\3\1\0"+
    "\6\3\4\0\2\3\4\0\2\3\1\0\1\u0105\16\3"+
    "\1\0\2\3\1\0\6\3\4\0\2\3\4\0\2\3"+
    "\1\0\17\3\1\0\2\3\1\0\2\3\1\u0106\3\3"+
    "\4\0\2\3\4\0\2\3\1\0\11\3\1\u0106\5\3"+
    "\1\0\2\3\1\0\6\3\4\0\2\3\4\0\2\3"+
    "\1\0\11\3\1\u0107\5\3\1\0\2\3\1\0\6\3"+
    "\4\0\2\3\4\0\2\3\1\0\13\3\1\u0108\3\3"+
    "\1\0\2\3\1\0\6\3\4\0\2\3\4\0\2\3"+
    "\1\0\17\3\1\0\2\3\1\0\1\3\1\250\4\3"+
    "\4\0\2\3\4\0\2\3\1\0\1\3\1\357\15\3"+
    "\1\0\2\3\1\0\6\3\4\0\2\3\4\0\2\3"+
    "\1\0\2\3\1\u0109\14\3\1\0\2\3\1\0\6\3"+
    "\4\0\2\3\4\0\2\3\1\0\13\3\1\u010a\3\3"+
    "\1\0\2\3\1\0\6\3\4\0\2\3\4\0\2\3"+
    "\1\0\3\3\1\u010b\13\3\1\0\2\3\1\0\6\3"+
    "\4\0\2\3\4\0\2\3\1\0\3\3\1\u010c\13\3"+
    "\1\0\2\3\1\0\6\3\4\0\2\3\4\0\2\3"+
    "\1\0\13\3\1\u010d\3\3\1\0\2\3\1\0\6\3"+
    "\4\0\2\3\4\0\2\3\1\0\1\3\1\211\15\3"+
    "\1\0\2\3\1\0\2\3\1\u010e\3\3\4\0\2\3"+
    "\4\0\2\3\1\0\17\3\1\0\2\3\1\0\2\3"+
    "\1\u010f\1\u0110\2\3\4\0\2\3\4\0\2\3\1\0"+
    "\6\3\1\226\10\3\1\0\2\3\1\0\2\3\1\235"+
    "\3\3\4\0\2\3\4\0\2\3\1\0\11\3\1\u0111"+
    "\5\3\1\0\2\3\1\0\6\3\4\0\2\3\4\0"+
    "\2\3\1\0\2\3\1\220\14\3\1\0\2\3\1\0"+
    "\6\3\4\0\2\3\4\0\2\3\1\0\13\3\1\226"+
    "\3\3\1\0\2\3\1\0\6\3\4\0\2\3\4\0"+
    "\2\3\1\0\17\3\1\0\2\3\1\0\6\3\2\0"+
    "\1\332\1\0\2\3\4\0\2\3\1\0\5\3\1\u0112"+
    "\11\3\1\0\2\3\1\0\6\3\4\0\2\3\4\0"+
    "\2\3\1\0\4\3\1\u0113\7\3\1\u0113\2\3\1\0"+
    "\2\3\1\0\2\3\1\u0114\3\3\4\0\2\3\4\0"+
    "\2\3\1\0\2\3\1\u0115\14\3\1\0\2\3\1\0"+
    "\6\3\4\0\2\3\4\0\2\3\1\0\17\3\1\0"+
    "\2\3\1\0\1\3\1\u0116\4\3\4\0\2\3\4\0"+
    "\2\3\1\0\16\3\1\u0117\1\0\2\3\1\0\6\3"+
    "\4\0\2\3\4\0\2\3\1\0\17\3\1\0\2\3"+
    "\1\0\3\3\1\u010a\2\3\4\0\2\3\4\0\2\3"+
    "\1\0\6\3\1\u0118\10\3\1\0\2\3\1\0\6\3"+
    "\4\0\2\3\4\0\2\3\1\0\14\3\1\170\2\3"+
    "\1\0\2\3\1\0\6\3\4\0\2\3\25\0\1\u0119"+
    "\24\0\2\3\1\0\3\3\1\u011a\13\3\1\0\2\3"+
    "\1\0\6\3\4\0\2\3\4\0\2\3\1\0\2\3"+
    "\1\166\14\3\1\0\2\3\1\0\6\3\4\0\2\3"+
    "\4\0\2\3\1\0\2\3\1\u011b\14\3\1\0\2\3"+
    "\1\0\6\3\4\0\2\3\4\0\2\3\1\0\5\3"+
    "\1\u011c\11\3\1\0\2\3\1\0\6\3\4\0\2\3"+
    "\4\0\2\3\1\0\17\3\1\0\2\3\1\0\3\3"+
    "\1\170\2\3\4\0\2\3\4\0\2\3\1\0\17\3"+
    "\1\0\2\3\1\0\3\3\1\64\2\3\4\0\2\3"+
    "\14\0\1\u011d\35\0\2\3\1\0\17\3\1\0\2\3"+
    "\1\0\2\3\1\u010e\3\3\4\0\2\3\4\0\2\3"+
    "\1\0\1\3\1\267\15\3\1\0\2\3\1\0\6\3"+
    "\4\0\2\3\4\0\2\3\1\0\1\3\1\u011e\15\3"+
    "\1\0\2\3\1\0\6\3\4\0\2\3\4\0\2\3"+
    "\1\0\11\3\1\340\5\3\1\0\2\3\1\0\6\3"+
    "\4\0\2\3\4\0\2\3\1\0\3\3\1\211\5\3"+
    "\1\u011f\5\3\1\0\2\3\1\0\2\3\1\u0120\3\3"+
    "\4\0\2\3\20\0\1\u0121\31\0\2\3\1\0\6\3"+
    "\1\u0122\10\3\1\0\2\3\1\0\2\3\1\64\3\3"+
    "\4\0\2\3\13\0\1\u0123\36\0\2\3\1\0\17\3"+
    "\1\0\2\3\1\0\2\3\1\u0124\3\3\4\0\2\3"+
    "\4\0\2\3\1\0\1\u0125\1\220\1\u0126\14\3\1\0"+
    "\2\3\1\0\2\3\1\215\3\3\4\0\2\3\4\0"+
    "\2\3\1\0\17\3\1\0\2\3\1\0\2\3\1\u0127"+
    "\3\3\4\0\2\3\4\0\2\3\1\0\12\3\1\u0128"+
    "\1\64\3\3\1\0\2\3\1\0\6\3\4\0\2\3"+
    "\4\0\2\3\1\0\13\3\1\u0129\3\3\1\0\2\3"+
    "\1\0\6\3\4\0\2\3\4\0\2\3\1\0\13\3"+
    "\1\u012a\3\3\1\0\2\3\1\0\6\3\4\0\2\3"+
    "\4\0\2\3\1\0\17\3\1\0\2\3\1\0\3\3"+
    "\1\264\2\3\4\0\2\3\4\0\2\3\1\0\2\3"+
    "\1\u010a\14\3\1\0\2\3\1\0\6\3\4\0\2\3"+
    "\4\0\2\3\1\0\17\3\1\0\2\3\1\0\2\3"+
    "\1\u012b\3\3\4\0\2\3\4\0\2\3\1\0\4\3"+
    "\1\u012c\12\3\1\0\2\3\1\0\6\3\4\0\2\3"+
    "\4\0\2\3\1\0\3\3\1\u012d\13\3\1\0\2\3"+
    "\1\0\6\3\4\0\2\3\12\0\1\u012e\37\0\2\3"+
    "\1\0\1\3\1\50\15\3\1\0\2\3\1\0\6\3"+
    "\4\0\2\3\4\0\2\3\1\0\12\3\1\64\4\3"+
    "\1\0\2\3\1\0\6\3\4\0\2\3\4\0\2\3"+
    "\1\0\3\3\1\220\13\3\1\0\2\3\1\0\6\3"+
    "\4\0\2\3\4\0\2\3\1\0\17\3\1\0\2\3"+
    "\1\0\1\3\1\170\4\3\4\0\2\3\4\0\2\3"+
    "\1\0\2\3\1\u012f\14\3\1\0\2\3\1\0\6\3"+
    "\4\0\2\3\4\0\2\3\1\0\2\3\1\u0130\14\3"+
    "\1\0\2\3\1\0\6\3\2\0\1\u0131\1\0\2\3"+
    "\4\0\2\3\1\0\17\3\1\0\2\3\1\0\2\3"+
    "\1\u010a\3\3\4\0\2\3\4\0\2\3\1\0\2\3"+
    "\1\u0132\14\3\1\0\2\3\1\0\6\3\4\0\2\3"+
    "\4\0\2\3\1\0\1\u0133\16\3\1\0\2\3\1\0"+
    "\6\3\4\0\2\3\4\0\2\3\1\0\16\3\1\363"+
    "\1\0\2\3\1\0\6\3\4\0\2\3\4\0\2\3"+
    "\1\0\4\3\1\220\12\3\1\0\2\3\1\0\6\3"+
    "\4\0\2\3\4\0\2\3\1\0\3\3\1\u0134\13\3"+
    "\1\0\2\3\1\0\3\3\1\247\2\3\4\0\2\3"+
    "\4\0\2\3\1\0\1\3\1\u0135\15\3\1\0\2\3"+
    "\1\0\6\3\4\0\2\3\4\0\2\3\1\0\1\3"+
    "\1\u0136\1\3\1\u0137\13\3\1\0\2\3\1\0\6\3"+
    "\4\0\2\3\4\0\2\3\1\0\1\3\1\u0115\15\3"+
    "\1\0\2\3\1\0\6\3\4\0\2\3\4\0\2\3"+
    "\1\0\12\3\1\u0138\4\3\1\0\2\3\1\0\6\3"+
    "\4\0\2\3\4\0\2\3\1\0\1\3\1\u0139\15\3"+
    "\1\0\2\3\1\0\6\3\4\0\2\3\4\0\2\3"+
    "\1\0\13\3\1\u013a\3\3\1\0\2\3\1\0\6\3"+
    "\4\0\2\3\4\0\2\3\1\0\6\3\1\u0115\10\3"+
    "\1\0\2\3\1\0\6\3\4\0\2\3\4\0\2\3"+
    "\1\0\12\3\1\u013b\4\3\1\0\2\3\1\0\6\3"+
    "\4\0\2\3\4\0\2\3\1\0\5\3\1\u013c\11\3"+
    "\1\0\2\3\1\0\6\3\4\0\2\3\4\0\2\3"+
    "\1\0\3\3\1\132\13\3\1\0\2\3\1\0\6\3"+
    "\4\0\2\3\4\0\2\3\1\0\11\3\1\u013d\5\3"+
    "\1\0\2\3\1\0\6\3\4\0\2\3\4\0\2\3"+
    "\1\0\3\3\1\u013e\13\3\1\0\2\3\1\0\6\3"+
    "\4\0\2\3\4\0\2\3\1\0\4\3\1\u012a\12\3"+
    "\1\0\2\3\1\0\6\3\4\0\2\3\4\0\2\3"+
    "\1\0\17\3\1\0\2\3\1\0\2\3\1\u013f\3\3"+
    "\4\0\2\3\4\0\2\3\1\0\6\3\1\u0140\10\3"+
    "\1\0\2\3\1\0\6\3\4\0\2\3\4\0\2\3"+
    "\1\0\3\3\1\u0141\13\3\1\0\2\3\1\0\6\3"+
    "\4\0\2\3\5\0\1\354\42\0\1\u0142\1\0\2\3"+
    "\1\0\12\3\1\264\4\3\1\0\2\3\1\0\6\3"+
    "\4\0\2\3\4\0\2\3\1\0\2\3\1\u0143\14\3"+
    "\1\0\2\3\1\0\6\3\4\0\2\3\4\0\2\3"+
    "\1\0\4\3\1\211\12\3\1\0\2\3\1\0\6\3"+
    "\4\0\2\3\4\0\2\3\1\0\2\3\1\u0144\1\u0145"+
    "\13\3\1\0\2\3\1\0\6\3\4\0\2\3\32\0"+
    "\1\332\17\0\2\3\1\0\11\3\1\u0146\5\3\1\0"+
    "\2\3\1\0\6\3\4\0\2\3\4\0\2\3\1\0"+
    "\1\64\16\3\1\0\2\3\1\0\6\3\4\0\2\3"+
    "\4\0\2\3\1\0\3\3\1\u0147\13\3\1\0\2\3"+
    "\1\0\6\3\4\0\2\3\4\0\2\3\1\0\17\3"+
    "\1\0\2\3\1\0\5\3\1\u0148\4\0\2\3\4\0"+
    "\2\3\1\0\2\3\1\u012a\14\3\1\0\2\3\1\0"+
    "\6\3\4\0\2\3\4\0\2\3\1\0\4\3\1\63"+
    "\12\3\1\0\2\3\1\0\6\3\4\0\2\3\4\0"+
    "\2\3\1\0\2\3\1\u0149\14\3\1\0\2\3\1\0"+
    "\6\3\4\0\2\3\4\0\2\3\1\0\1\273\16\3"+
    "\1\0\2\3\1\0\6\3\4\0\2\3\4\0\2\3"+
    "\1\0\13\3\1\u014a\3\3\1\0\2\3\1\0\6\3"+
    "\4\0\2\3\4\0\2\3\1\0\3\3\1\u014b\13\3"+
    "\1\0\2\3\1\0\6\3\4\0\2\3\4\0\2\3"+
    "\1\0\11\3\1\u014c\5\3\1\0\2\3\1\0\6\3"+
    "\4\0\2\3\4\0\2\3\1\0\11\3\1\u014d\5\3"+
    "\1\0\2\3\1\0\6\3\4\0\2\3\4\0\2\3"+
    "\1\0\17\3\1\0\2\3\1\0\3\3\1\u0148\2\3"+
    "\4\0\2\3\15\0\1\315\34\0\2\3\1\0\17\3"+
    "\1\u014e\2\3\1\0\6\3\4\0\2\3\4\0\2\3"+
    "\1\0\17\3\1\0\2\3\1\0\3\3\1\u014f\2\3"+
    "\4\0\2\3\4\0\2\3\1\0\2\3\1\u0150\14\3"+
    "\1\0\2\3\1\0\6\3\4\0\2\3\4\0\2\3"+
    "\1\0\17\3\1\0\1\3\1\170\1\0\6\3\4\0"+
    "\2\3\4\0\2\3\1\0\17\3\1\0\2\3\1\0"+
    "\2\3\1\u0151\3\3\4\0\2\3\4\0\2\3\1\0"+
    "\2\3\1\163\14\3\1\0\2\3\1\0\6\3\4\0"+
    "\2\3\4\0\2\3\1\0\1\3\1\220\15\3\1\0"+
    "\2\3\1\0\6\3\4\0\2\3\4\0\2\3\1\0"+
    "\17\3\1\0\2\3\1\0\2\3\1\u0152\3\3\4\0"+
    "\2\3\4\0\2\3\1\0\1\3\1\u0153\15\3\1\0"+
    "\2\3\1\0\6\3\4\0\2\3\4\0\2\3\1\0"+
    "\17\3\1\0\2\3\1\0\3\3\1\u0154\2\3\4\0"+
    "\2\3\4\0\2\3\1\0\13\3\1\64\3\3\1\0"+
    "\2\3\1\0\6\3\4\0\2\3\4\0\2\3\1\0"+
    "\16\3\1\u0155\1\0\2\3\1\0\6\3\4\0\2\3"+
    "\4\0\2\3\1\0\1\u0156\16\3\1\0\2\3\1\0"+
    "\6\3\4\0\2\3\4\0\2\3\1\0\2\3\1\u0157"+
    "\14\3\1\0\2\3\1\0\6\3\4\0\2\3\4\0"+
    "\2\3\1\0\11\3\1\174\5\3\1\0\2\3\1\0"+
    "\6\3\4\0\2\3\4\0\2\3\1\0\17\3\1\u0158"+
    "\2\3\1\0\6\3\4\0\2\3\4\0\2\3\1\0"+
    "\1\3\1\270\7\3\1\u0159\5\3\1\0\2\3\1\0"+
    "\6\3\4\0\2\3\4\0\2\3\1\0\4\3\1\170"+
    "\1\3\1\u015a\10\3\1\0\2\3\1\0\6\3\4\0"+
    "\2\3\4\0\2\3\1\0\1\u015b\16\3\1\0\2\3"+
    "\1\0\6\3\4\0\2\3\4\0\2\3\1\0\11\3"+
    "\1\u015c\5\3\1\0\2\3\1\0\6\3\4\0\2\3"+
    "\4\0\2\3\1\0\11\3\1\u015c\1\3\1\u0106\3\3"+
    "\1\0\2\3\1\0\6\3\4\0\2\3\4\0\2\3"+
    "\1\0\17\3\1\0\2\3\1\0\2\3\1\226\3\3"+
    "\4\0\2\3\4\0\2\3\1\0\1\3\1\u012a\15\3"+
    "\1\0\2\3\1\0\6\3\4\0\2\3\4\0\2\3"+
    "\1\0\5\3\1\u015d\11\3\1\0\2\3\1\0\6\3"+
    "\4\0\2\3\11\0\1\u015e\40\0\2\3\1\0\17\3"+
    "\1\0\1\3\1\211\1\0\6\3\4\0\2\3\4\0"+
    "\2\3\1\0\6\3\1\u015f\10\3\1\0\2\3\1\0"+
    "\6\3\4\0\2\3\4\0\2\3\1\0\17\3\1\0"+
    "\2\3\1\0\5\3\1\u0160\4\0\2\3\7\0\1\u0161"+
    "\42\0\2\3\1\0\1\211\16\3\1\0\2\3\1\0"+
    "\6\3\4\0\2\3\4\0\2\3\1\0\17\3\1\0"+
    "\2\3\1\0\2\3\1\u0162\3\3\4\0\2\3\4\0"+
    "\2\3\1\0\1\3\1\u0163\15\3\1\0\2\3\1\0"+
    "\6\3\4\0\2\3\21\0\1\u0161\30\0\2\3\1\0"+
    "\2\3\1\u012a\14\3\1\0\2\3\1\0\2\3\1\170"+
    "\3\3\4\0\2\3\34\0\1\u0164\15\0\2\3\1\0"+
    "\1\3\1\u012f\15\3\1\0\2\3\1\0\6\3\4\0"+
    "\2\3\4\0\2\3\1\0\1\3\1\342\15\3\1\0"+
    "\2\3\1\0\6\3\4\0\2\3\4\0\2\3\1\0"+
    "\17\3\1\0\2\3\1\0\3\3\1\211\2\3\4\0"+
    "\2\3\4\0\2\3\1\0\1\3\1\u0165\15\3\1\0"+
    "\2\3\1\0\6\3\4\0\2\3\4\0\2\3\1\0"+
    "\10\3\1\170\6\3\1\0\2\3\1\0\6\3\4\0"+
    "\2\3\4\0\2\3\1\0\17\3\1\u0166\2\3\1\0"+
    "\6\3\4\0\2\3\4\0\2\3\1\0\17\3\1\0"+
    "\2\3\1\0\2\3\1\170\3\3\4\0\2\3\4\0"+
    "\2\3\1\0\1\3\1\u014d\15\3\1\0\2\3\1\0"+
    "\6\3\4\0\2\3\4\0\2\3\1\0\5\3\1\331"+
    "\11\3\1\0\2\3\1\0\6\3\4\0\2\3\4\0"+
    "\2\3\1\0\17\3\1\0\2\3\1\0\2\3\1\u0167"+
    "\3\3\4\0\2\3\7\0\1\332\42\0\2\3\1\0"+
    "\1\u0149\16\3\1\0\2\3\1\0\6\3\4\0\2\3"+
    "\4\0\2\3\1\0\17\3\1\0\1\u0168\1\3\1\0"+
    "\6\3\4\0\2\3\36\0\1\u0169\13\0\2\3\1\0"+
    "\17\3\1\0\2\3\1\0\3\3\1\u0162\2\3\4\0"+
    "\2\3\4\0\2\3\1\0\1\3\1\u016a\15\3\1\0"+
    "\2\3\1\0\6\3\4\0\2\3\4\0\2\3\1\0"+
    "\17\3\1\0\2\3\1\0\3\3\1\u016b\2\3\4\0"+
    "\2\3\4\0\2\3\1\0\4\3\1\u016c\12\3\1\0"+
    "\2\3\1\0\6\3\4\0\2\3\4\0\2\3\1\0"+
    "\13\3\1\u016d\3\3\1\0\2\3\1\0\6\3\4\0"+
    "\2\3\4\0\2\3\1\0\13\3\1\u0115\3\3\1\0"+
    "\2\3\1\0\6\3\4\0\2\3\4\0\2\3\1\0"+
    "\2\3\1\u016e\14\3\1\0\2\3\1\0\6\3\4\0"+
    "\2\3\4\0\2\3\1\0\6\3\1\u016f\10\3\1\0"+
    "\2\3\1\0\6\3\4\0\2\3\4\0\2\3\1\0"+
    "\11\3\1\u0170\5\3\1\0\2\3\1\0\6\3\4\0"+
    "\2\3\4\0\2\3\1\0\5\3\1\u0171\11\3\1\0"+
    "\2\3\1\0\6\3\4\0\2\3\4\0\2\3\1\0"+
    "\17\3\1\0\2\3\1\0\2\3\1\u0172\3\3\4\0"+
    "\2\3\4\0\2\3\1\0\12\3\1\u0173\4\3\1\0"+
    "\2\3\1\0\6\3\4\0\2\3\4\0\2\3\1\0"+
    "\17\3\1\0\2\3\1\0\5\3\1\u0174\4\0\2\3"+
    "\4\0\2\3\1\0\1\3\1\u0175\15\3\1\0\2\3"+
    "\1\0\6\3\4\0\2\3\4\0\2\3\1\0\11\3"+
    "\1\143\5\3\1\0\2\3\1\0\6\3\4\0\2\3"+
    "\4\0\2\3\1\0\17\3\1\0\2\3\1\0\2\3"+
    "\1\u0176\3\3\4\0\2\3\4\0\2\3\1\0\4\3"+
    "\1\211\12\3\1\0\1\3\1\235\1\0\6\3\4\0"+
    "\2\3\4\0\2\3\1\0\13\3\1\u0177\3\3\1\0"+
    "\2\3\1\0\6\3\4\0\2\3\4\0\2\3\1\0"+
    "\6\3\1\u0160\10\3\1\0\2\3\1\0\6\3\4\0"+
    "\2\3\4\0\2\3\1\0\17\3\1\0\1\3\1\u0170"+
    "\1\0\6\3\4\0\2\3\4\0\2\3\1\0\3\3"+
    "\1\u016e\13\3\1\0\2\3\1\0\6\3\4\0\2\3"+
    "\4\0\2\3\1\0\1\170\16\3\1\0\2\3\1\0"+
    "\6\3\4\0\2\3\4\0\2\3\1\0\12\3\1\u0152"+
    "\4\3\1\0\2\3\1\0\6\3\4\0\2\3\4\0"+
    "\2\3\1\0\4\3\1\u0178\12\3\1\0\2\3\1\0"+
    "\6\3\4\0\2\3\4\0\2\3\1\0\12\3\1\u0160"+
    "\4\3\1\0\2\3\1\0\6\3\4\0\2\3\4\0"+
    "\2\3\1\0\6\3\1\170\10\3\1\0\2\3\1\0"+
    "\6\3\4\0\2\3\15\0\1\332\34\0\2\3\1\0"+
    "\2\3\1\u0179\14\3\1\0\2\3\1\0\6\3\4\0"+
    "\2\3\4\0\2\3\1\0\13\3\1\u017a\3\3\1\0"+
    "\2\3\1\0\6\3\4\0\2\3\4\0\2\3\1\0"+
    "\13\3\1\u017b\3\3\1\0\2\3\1\0\6\3\4\0"+
    "\2\3\4\0\2\3\1\0\1\3\1\u017c\15\3\1\0"+
    "\2\3\1\0\6\3\4\0\2\3\4\0\2\3\1\0"+
    "\14\3\1\u017d\2\3\1\0\2\3\1\0\6\3\4\0"+
    "\2\3\4\0\2\3\1\0\1\3\1\u0126\15\3\1\0"+
    "\2\3\1\0\6\3\4\0\2\3\4\0\2\3\1\0"+
    "\17\3\1\u017e\2\3\1\0\6\3\4\0\2\3\4\0"+
    "\2\3\1\0\2\3\1\u0118\14\3\1\0\2\3\1\0"+
    "\6\3\4\0\2\3\4\0\2\3\1\0\4\3\1\u017f"+
    "\12\3\1\0\2\3\1\0\6\3\4\0\2\3\4\0"+
    "\2\3\1\0\17\3\1\0\2\3\1\0\3\3\1\317"+
    "\2\3\4\0\2\3\4\0\2\3\1\0\3\3\1\u0180"+
    "\13\3\1\0\2\3\1\0\6\3\4\0\2\3\4\0"+
    "\2\3\1\0\1\3\1\u0181\15\3\1\0\2\3\1\0"+
    "\6\3\4\0\2\3\4\0\2\3\1\0\17\3\1\0"+
    "\2\3\1\0\5\3\1\u0182\4\0\2\3\4\0\2\3"+
    "\1\0\17\3\1\0\2\3\1\0\2\3\1\u0183\3\3"+
    "\4\0\2\3\35\0\1\332\14\0\2\3\1\0\17\3"+
    "\1\0\2\3\1\0\2\3\1\u0184\3\3\4\0\2\3"+
    "\4\0\2\3\1\0\11\3\1\64\5\3\1\0\2\3"+
    "\1\0\6\3\4\0\2\3\10\0\1\332\41\0\2\3"+
    "\1\0\3\3\1\u0181\13\3\1\0\2\3\1\0\6\3"+
    "\4\0\2\3\4\0\2\3\1\0\17\3\1\0\2\3"+
    "\1\0\6\3\1\0\1\u0185\2\0\2\3\20\0\1\u0186"+
    "\31\0\2\3\1\0\17\3\1\0\2\3\1\0\6\3"+
    "\1\0\1\u0161\2\0\2\3\7\0\1\u0187\42\0\2\3"+
    "\1\0\13\3\1\u0188\3\3\1\0\2\3\1\0\6\3"+
    "\4\0\2\3\4\0\2\3\1\0\11\3\1\u0189\5\3"+
    "\1\0\2\3\1\0\6\3\4\0\2\3\12\0\1\u018a"+
    "\37\0\2\3\1\0\3\3\1\u018b\13\3\1\0\2\3"+
    "\1\0\6\3\4\0\2\3\4\0\2\3\1\0\11\3"+
    "\1\u018c\5\3\1\0\2\3\1\0\6\3\4\0\2\3"+
    "\4\0\2\3\1\0\17\3\1\0\2\3\1\0\2\3"+
    "\1\u018d\3\3\4\0\2\3\4\0\2\3\1\0\17\3"+
    "\1\0\2\3\1\0\2\3\1\247\3\3\4\0\2\3"+
    "\4\0\2\3\1\0\3\3\1\357\13\3\1\0\2\3"+
    "\1\0\6\3\4\0\2\3\4\0\2\3\1\0\13\3"+
    "\1\132\3\3\1\0\2\3\1\0\6\3\4\0\2\3"+
    "\4\0\2\3\1\0\1\3\1\270\15\3\1\0\2\3"+
    "\1\0\6\3\4\0\2\3\4\0\2\3\1\0\11\3"+
    "\1\u0109\5\3\1\0\2\3\1\0\6\3\4\0\2\3"+
    "\4\0\2\3\1\0\13\3\1\u018e\3\3\1\0\2\3"+
    "\1\0\6\3\4\0\2\3\4\0\2\3\1\0\13\3"+
    "\1\166\3\3\1\0\2\3\1\0\6\3\4\0\2\3"+
    "\4\0\2\3\1\0\13\3\1\u018f\3\3\1\0\2\3"+
    "\1\0\6\3\4\0\2\3\4\0\2\3\1\0\17\3"+
    "\1\0\2\3\1\0\6\3\3\0\1\u0161\2\3\4\0"+
    "\2\3\1\0\11\3\1\u0100\5\3\1\0\2\3\1\0"+
    "\6\3\4\0\2\3\4\0\2\3\1\0\4\3\1\u0173"+
    "\12\3\1\0\2\3\1\0\6\3\4\0\2\3\4\0"+
    "\2\3\1\0\1\3\1\u0179\15\3\1\0\2\3\1\0"+
    "\6\3\4\0\2\3\4\0\2\3\1\0\12\3\1\u0178"+
    "\4\3\1\0\2\3\1\0\6\3\4\0\2\3\4\0"+
    "\2\3\1\0\11\3\1\u0190\5\3\1\0\2\3\1\0"+
    "\6\3\4\0\2\3\34\0\1\u0191\15\0\2\3\1\0"+
    "\3\3\1\166\13\3\1\0\2\3\1\0\6\3\4\0"+
    "\2\3\4\0\2\3\1\0\13\3\1\211\3\3\1\0"+
    "\2\3\1\0\6\3\4\0\2\3\4\0\2\3\1\0"+
    "\1\3\1\u0192\15\3\1\0\2\3\1\0\6\3\4\0"+
    "\2\3\4\0\2\3\1\0\11\3\1\u0193\5\3\1\0"+
    "\2\3\1\0\6\3\4\0\2\3\10\0\1\u0194\56\0"+
    "\1\146\35\0\1\146\40\0\2\3\1\0\1\3\1\u0179"+
    "\1\3\1\u0179\13\3\1\0\2\3\1\0\6\3\4\0"+
    "\2\3\4\0\2\3\1\0\4\3\1\u0162\12\3\1\0"+
    "\2\3\1\0\6\3\4\0\2\3\15\0\1\146\34\0"+
    "\2\3\1\0\13\3\1\u0125\3\3\1\0\2\3\1\0"+
    "\6\3\4\0\2\3\4\0\2\3\1\0\1\3\1\u0195"+
    "\15\3\1\0\2\3\1\0\6\3\4\0\2\3\4\0"+
    "\2\3\1\0\1\3\1\u0196\15\3\1\0\2\3\1\0"+
    "\6\3\4\0\2\3\4\0\2\3\1\0\1\3\1\u0197"+
    "\15\3\1\0\2\3\1\0\6\3\4\0\2\3\4\0"+
    "\2\3\1\0\3\3\1\u0179\13\3\1\0\2\3\1\0"+
    "\6\3\4\0\2\3\4\0\2\3\1\0\2\3\1\u0198"+
    "\14\3\1\0\2\3\1\0\6\3\4\0\2\3\10\0"+
    "\1\u0199\41\0\2\3\1\0\17\3\1\0\2\3\1\0"+
    "\3\3\1\u017f\2\3\4\0\2\3\4\0\2\3\1\0"+
    "\6\3\1\u019a\10\3\1\0\2\3\1\0\6\3\4\0"+
    "\2\3\13\0\1\332\36\0\2\3\1\0\17\3\1\0"+
    "\2\3\1\0\3\3\1\u019b\2\3\4\0\2\3\4\0"+
    "\2\3\1\0\14\3\1\u019c\2\3\1\0\2\3\1\0"+
    "\6\3\4\0\2\3\4\0\2\3\1\0\17\3\1\0"+
    "\2\3\1\0\4\3\1\u0177\1\3\4\0\2\3\4\0"+
    "\2\3\1\0\6\3\1\u012a\10\3\1\0\2\3\1\0"+
    "\6\3\4\0\2\3\23\0\1\146\26\0\2\3\1\0"+
    "\1\3\1\u019d\15\3\1\0\2\3\1\0\6\3\4\0"+
    "\2\3\4\0\2\3\1\0\3\3\1\u019e\13\3\1\0"+
    "\2\3\1\0\6\3\4\0\2\3\4\0\2\3\1\0"+
    "\2\3\1\u019f\14\3\1\0\2\3\1\0\6\3\4\0"+
    "\2\3\4\0\2\3\1\0\14\3\1\u01a0\2\3\1\0"+
    "\2\3\1\0\6\3\4\0\2\3\4\0\2\3\1\0"+
    "\6\3\1\50\10\3\1\0\2\3\1\0\6\3\4\0"+
    "\2\3\4\0\2\3\1\0\2\3\1\u01a1\14\3\1\0"+
    "\2\3\1\0\6\3\4\0\2\3\4\0\2\3\1\0"+
    "\6\3\1\u01a2\10\3\1\0\2\3\1\0\6\3\4\0"+
    "\2\3\4\0\2\3\1\0\17\3\1\0\2\3\1\0"+
    "\2\3\1\u01a3\3\3\4\0\2\3\4\0\2\3\1\0"+
    "\2\3\1\u019e\14\3\1\0\2\3\1\0\6\3\4\0"+
    "\2\3\3\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[15238];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\43\1\1\0\23\1\1\11\22\1\1\0"+
    "\2\1\1\0\3\1\1\0\11\1\2\0\6\1\1\0"+
    "\12\1\1\0\10\1\1\0\67\1\1\0\6\1\1\0"+
    "\5\1\1\0\1\1\1\0\13\1\1\11\1\0\13\1"+
    "\1\11\21\1\1\0\4\1\1\0\15\1\1\0\31\1"+
    "\1\0\3\1\1\0\3\1\1\0\1\1\1\0\12\1"+
    "\1\0\2\1\1\0\20\1\1\11\13\1\1\0\11\1"+
    "\1\11\5\1\1\0\2\1\1\0\2\1\1\0\1\1"+
    "\1\0\2\1\1\0\24\1\1\0\6\1\3\0\2\1"+
    "\1\0\6\1\1\0\2\1\1\0\4\1\1\0\12\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[419];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    public String lexeme;


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  Lexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 122) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Tokens yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 10: 
          { lexeme=yytext(); return Interjección;
          }
        case 14: break;
        case 13: 
          { lexeme=yytext(); return Adverbio;
          }
        case 15: break;
        case 8: 
          { lexeme=yytext(); return Pronombre;
          }
        case 16: break;
        case 1: 
          { return ERROR;
          }
        case 17: break;
        case 9: 
          { lexeme=yytext(); return Sustantivo;
          }
        case 18: break;
        case 5: 
          { lexeme=yytext(); return Preposición;
          }
        case 19: break;
        case 12: 
          { lexeme=yytext(); return Adjetivo;
          }
        case 20: break;
        case 6: 
          { lexeme=yytext(); return Conjunción;
          }
        case 21: break;
        case 11: 
          { lexeme=yytext(); return Verbo;
          }
        case 22: break;
        case 3: 
          { lexeme=yytext(); return Numero;
          }
        case 23: break;
        case 4: 
          { /*Ignore*/
          }
        case 24: break;
        case 7: 
          { lexeme=yytext(); return Articulo;
          }
        case 25: break;
        case 2: 
          { lexeme=yytext(); return Identificador;
          }
        case 26: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return null;
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
